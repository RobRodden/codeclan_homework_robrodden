---
title: "R Notebook"
output: html_notebook
---

# Session 1 -- Cleaning data

```{r}
library(tidyverse)
install.packages('janitor')
library(janitor)
```

# Functions

'janitor::clean_names()'
'rename()'

# Data

csv - 

First 4 lines are "meta-data" -- data abourt data

```{r}
video_game <- read_csv("data/steam-200k-sample.csv")
```

```{r}
video_game <- read_csv("data/steam-200k-sample.csv", skip = 4)
```

```{r}
dim("data/steam-200k-sample.csv")
```

```{r}
video_game <- read_csv("data/steam-200k-sample.csv",
                       skip = 4,
                       col_types = cols("bought online" = col_logical()))
```

# turns 0 / 1 into TRUE and FALSE
```{r}
read_csv("data/steam-200k-sample.csv", skip = 4) %>%
  mutate(`bought online` = as.logical(`bought online`))
```

# standardises heading eg put's an underscore in where spaces are
```{r}
names(video_game)

video_games_janitor_clean <- video_game %>% 
  clean_names()

video_games_janitor_clean
```
# renames headings
```{r}
video_games_janitor_clean %>% 
  rename(`game_title` = `game_name`,
         `activity` = `what`,
         `playing_hours` = `value`)
```
## Session 2 -- Missing Values
# Missing data is not the same nothing

```{r}
library(CodeClanData)
comms_data
```

# MNAR
analyses can accomodate

# Mar
maybe ok
means the missing data is relate to another (external variable)

#MNAR
bad news the data is missing due to an underlying parrern within the same variable
```{r}
NA + 2

mean(c(2,3,4,5,6,NA))
mean(c(2.3.4.5.6))

c(`Edinburgh`, `Glasgow`, `Unknown`)

```

```{r}
NA # explitily encouding missingness
NaN # 0/0
`unknown` # character representation of an unknown value
NULL # complete lack of a value
```

```{r}
comms_data %>% 
  drop_na() # drops rows with NA but throws out other possibly relevant data
```

# Imputation
replace the NA with something sensible
maybe the mean, median

```{r}
comms_data %>% 
  pull(monthly_charges) %>% 
  mean(na.rm = TRUE)
```

```{r}
comms_data %>% 
  pull(monthly_charges) %>% 
  median(na.rm = TRUE)
```

```{r}
comms_data %>% 
  pull(monthly_charges) %>% 
  range(na.rm = TRUE)
```

```{r}
min_charge <- comms_data %>% 
  pull(monthly_charges) %>% 
  min(na.rm = TRUE)
min_charge
```

```{r}
max_charge <- comms_data %>% 
  pull(monthly_charges) %>% 
  max(na.rm = TRUE)
max_charge
```

```{r}
max_charge - min_charge
```

```{r}
summary(comms_data)
```

# leave missing data (NA) alone?

`is.na

```{r}
is.na(`1`)
is.na(NA)
is.na(NULL)
is.na(NaN)
is.na('unknown')
```

```{r}
comms_data

```

# standard missing values

NA
```{r}
comms_data
comms_data %>% 
  filter(is.na(monthly_charges))

comms_data %>% 
  summarise(count = sum(is.na(monthly_charges)))
```

```{r}
comms_data %>% 
  pull(monthly_charges) %>% 
  is.na() %>% 
  mean()

```

```{r}
comms_data %>% 
  drop_na(monthly_charges)
```

'coalesce()' coalesce(what to replace, what to replace with)
```{r}
comms_data_imputed_values <- comms_data %>% 
  mutate(monthly_charges2 = coalesce(monthly_charges,
                                     median(monthly_charges, na.rm =TRUE)),
monthly_charges3 = coalesce(monthly_charges,
                            mean(monthly_charges, na.rm = TRUE)))
comms_data_imputed_values
```

```{r}
comms_data %>% 
  select(monthly_charges) %>% 
  mutate(monthly_charges2 = coalesce(monthly_charges,
                                     median(monthly_charges, na.rm = TRUE)))
summary(comms_data)
```
```{r}
comms_data <- clean_names(comms_data)

comms_data_imputed_values <- comms_data %>% 
  mutate(monthly_charges2 = coalesce(monthly_charges,
                                     median(monthly_charges, na.rm = TRUE)),
         monthly_charges3 = coalesce(monthly_charges,
                                     median(monthly_charges, na.rm = TRUE)))
summary(comms_data)
```


```{r}
ggplot(comms_data_imputed_values, aes(customer_id, monthly_charges2)) +
  geom_point()

ggplot(comms_data_imputed_values, aes(customer_id, monthly_charges3)) +
  geom_point()
```

#
```{r}
comms_data %>% 
  select(payment_method) %>% 
  summerise(payment_method)
  
```

# na_if() opposite 
```{r}
comms_data %>% 
  filter(is.na(total_charges))

comms_data_imputed_values %>% 
  select(total_charges) %>% 
  mutate(total_charges_exploicit_na = na_if(total_charges, "na"),
         total_charges_exploicit_na2 = na_if(total_charges_exploicit_na, "N/A"))

# add code here
```

```{r}
comms_data %>% 
  mutate(total_charges = na_if(total_charges, "na"),
         total_charges = na_if(total_charges, "N/A"),
         payment_method = na_if(payment_method, "--"))
# modify the last line to change NA or -- into unknown
```

```{r}
comms_data_cleaned <- comms_data %>% 
  mutate(total_charges = na_if(total_charges, "na"),
         total_charges = na_if(total_charges, "N/A"),
         payment_method = na_if(payment_method, "--"),
         payment_method = coalesce(payment_method, "unknown"))

comms_data_cleaned
```

# coalesce - na_if()

## Recoding

- understand _what_ recoding is.
- know how to use the functions 'if_else', recode and 'case_when'


###'if_else()'
when condition is true do this thing, else do this other thing

```{r}
students_big %>% 
  select(ageyears)
```

```{r}
students_big %>% 
  select(ageyears) %>% 
  mutate(older_than_12 = ageyears > 12)
```

```{r}
students_big %>% 
  select(ageyears) %>% 
  mutate(older_than_12 = if_else(ageyears > 12,
                                 "Older than 12", "12 or younger"))
```

# 'if_else(TEST, value if TRUE, value if FALSE)'

```{r}
students_big %>% 
  select(gender) %>% 
  mutate(gender_recoded = if_else(gender == "M", "Male", "Female"))
```

#Task

Change the column 'handed' to right and left instead of R and L

in farourite_physical_activity change football/soccer into football and leave all other activies the same.

```{r}
students_big %>% 
  select(handed) %>% 
  mutate(handed_recoded = if_else(handed == "R", "Right", "Left"))
```

```{r}
students_big %>% 
    mutate(handed = if_else(handed == "R", "Right",
                                    "Left"))
```

```{r}
students_big %>% 
  select(favourite_physical_activity) %>% 
  mutate(fpa_recoded = if_else(favourite_physical_activity == "Football/Soccer", "Football", favourite_physical_activity))
```

```{r}
students_big %>% 
  select(favourite_physical_activity, handed) %>%
  mutate(handed_recoded = if_else(handed == "R", "Right", "Left")) %>% 
  mutate(fpa_recoded = if_else(favourite_physical_activity == "Football/Soccer", "Football", favourite_physical_activity))
```

```{r}
students_big %>% 
  select(favourite_physical_activity, handed) %>%
  mutate(handed_recoded = if_else(handed == "R", "Right", "Left")) %>% 
  mutate(fpa_recoded = if_else(favourite_physical_activity == "Football/Soccer", "Football", favourite_physical_activity), .after = favourite_physical_activity)
```

# 'recode()

```{r}
students_big %>% 
  select(travel_to_school) %>% 
  mutate(travel_to_school_recoded = recode(travel_to_school,
                                           "Bus" = "bus",
                                           "Car" = "car",
                                           "Walk" = "walk"))

students_big %>% 
  count(travel_to_school)

students_big %>% 
  select(travel_to_school) %>% 
  mutate(travel_to_school_recoded = recode(travel_to_school,
                                           "Bus" = "bus",
                                           "Car" = "car",
                                           "Walk" = "walk",
                                           .default = "other"))
```

```{r}
students_big %>% 
  select(ageyears) %>% 
  mutate(ageyears_recoded = recode(ageyears, "12" = 120,
                           .default = 0))
```
```{r}
data <- read.table(header = TRUE, text="
 subject sex control cond1 cond2 compl
       1   M     7.9  12.3  10.7  T
       2   F     6.3  10.6  11.1  T
       3   F     9.5  13.1  13.8  N
       4   M    11.5  13.4  12.9  F
")

data %>% 
  select(subject, sex, compl) %>% 
  mutate(subject_reccoded = recode(subject,
                                   "1" = "001",
                                   "2" = "002",
                                   "3" = "003",
                                   "4" = "004"),
         sex = recode(sex,
                      "M" = "Male",
                      "F" = "Female"),
         compl = recode(compl,
                        "T" = "True",
                        "F" = "False",
                        .default = NA_character_))
         
```


# 'case_when()'
```{r}
x <- 1:10

case_when(x <= 5 ~ "A")
```

```{r}
x <- 1:10

case_when(x <= 5 ~ "A",
          x <= 7 ~"B")
```

```{r}
x <- 1:10

case_when(x <= 5 ~ "A",
          x <= 7 ~"B",
          TRUE ~ "C")
```

```{r}
students_big %>% 
  select(ageyears) %>% 
  mutate(
    age_divisible = case_when(
      ageyears %% 2 == 0 ~ "Even",
      ageyears %% 3 == 0 ~ "Divisible by 3",
      ageyears %% 5 == 0 ~ "Divisible by 5",
      TRUE               ~ "Other number"
    )
  )
```

```{r}
students_big %>% 
  select(ageyears) %>% 
  mutate(
    age_divisible = case_when(
      ageyears %% 2 == 0 ~ "Even",
      ageyears %% 3 == 0 ~ "Divisible by 3",
      ageyears %% 5 == 0 ~ "Divisible by 5",
      TRUE               ~ "Other number"
    )
  )
```
```{r}
students_big %>% 
  select(ageyears) %>% 
  mutate(
    ageyears = case_when(
      ageyears %% 2 == 0 ~ "Even",
      ageyears %% 3 == 0 ~ "Divisible by 3",
      ageyears %% 5 == 0 ~ "Divisible by 5",
      TRUE               ~ as.character(ageyears)
    )
  )
```


#using 'group_by() with 'mutate()'
```{r}
new_coders %>% 
  group_by(reasons_to_code) %>% 
  summarise(avg_exp_earn = mean(expected_earn))

new_coders %>% 
  group_by(job_pref) %>% 
  mutate(avg_exp_earn = mean(expected_earn)) %>% 
  ungroup()
```

#window function
lag() and lead()
```{r}
chinesemeal %>% 
  mutate(last_year_cals = lag(CaloriesPerDay))

chinesemeal %>% 
  mutate(last_year_cals = lead(CaloriesPerDay))

chinesemeal %>% 
  mutate(diff_cals = lag(CaloriesPerDay) - CaloriesPerDay)
```
### 'across()'
```{r}

deaths <- CodeClanData::all_deaths %>% 
  clean_names()

deaths %>% 
  mutate(book1_go_t = as.logical(book1_go_t))

deaths %>% 
  mutate(across(book1_go_t:book5_dw_d, as.logical))

deaths %>% 
  mutate(across(book1_go_t:book5_dw_d, sum))
         
         
```

```